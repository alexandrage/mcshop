<?php
namespace McShop\ShoppingCartBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use McShop\ServersBundle\Entity\Server;
use McShop\ShoppingCartBundle\Entity\ShoppingCart;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * ShoppingCartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShoppingCartRepository extends EntityRepository
{
    const RETURN_QUERY = 0;
    const RETURN_RESULT = 1;
    const RETURN_SINGLE_RESULT = 2;

    /** @var int */
    private $type = self::RETURN_RESULT;

    /**
     * @param int $type
     * @return ShoppingCartRepository
     */
    public function setType($type)
    {
        $this->type = $type;
        return $this;
    }

    /**
     * @param UserInterface|null $user
     * @param Server|null $server
     * @return QueryBuilder|ShoppingCart|ShoppingCart[]|null
     */
    public function findItemsByUserOrServer(UserInterface $user = null, Server $server = null)
    {
        $qb = $this->createQueryBuilder('sp');
        
        $qb
            ->select('sp, u, s')
            ->join('McShopUserBundle:User', 'u', 'WITH', 'u.username = sp.player')
            ->join('McShopServersBundle:Server', 's', 'WITH', 's.shoppingCartId = sp.server')
        ;

        if ($user !== null) {
            $qb
                ->andWhere('u.username = :username')
                ->setParameter('username', $user->getUsername())
            ;
        }

        if ($server !== null) {
            $qb
                ->andWhere('s.shoppingCartId = :serverId')
                ->setParameter('serverId', $server->getShoppingCartId())
            ;
        }

        return $this->getResult($qb);
    }

    /**
     * @param QueryBuilder $qb
     * @return QueryBuilder|null|ShoppingCart[]|ShoppingCart
     */
    private function getResult(QueryBuilder $qb)
    {
        if ($this->type === self::RETURN_QUERY) {
            return $qb;
        }

        if ($this->type === self::RETURN_RESULT) {
            return $qb->getQuery()->execute();
        }

        if ($this->type === self::RETURN_SINGLE_RESULT) {
            return $qb->getQuery()->getSingleResult();
        }

        return null;
    }
}
